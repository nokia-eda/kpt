apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.18.0
  name: simlinks.core.eda.nokia.com
spec:
  group: core.eda.nokia.com
  names:
    kind: SimLink
    listKind: SimLinkList
    plural: simlinks
    singular: simlink
  scope: Namespaced
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: SimLink is the Schema for the simlinks API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: SimLinkSpec defines the desired state of SimLink
            properties:
              bondName:
                description: |-
                  When creating a SimLink with more than one member, the bondName is used to create a bond on the SimNode side.
                  This field must not be used when creating a single member SimLink.
                type: string
              links:
                description: |-
                  To create a point to point link with a single interface on both sides use a single link object.
                  To create a point to point link with a LAG configured on both side, use two links with matching nodes.
                  A multihommed lag is created by using two or more links where the remoteNode and/or localNode can be different.
                  Creating a link with only localNode specified will create an edge interface.
                items:
                  properties:
                    local:
                      properties:
                        interface:
                          description: Normalized name of the interface/port, e.g. ethernet-1-1.
                          type: string
                        interfaceResource:
                          description: Reference to a Interface.
                          type: string
                        node:
                          description: Reference to a TopoNode.
                          type: string
                      required:
                      - interfaceResource
                      - node
                      type: object
                    sim:
                      properties:
                        interface:
                          description: Normalized name of the interface/port, e.g. ethernet-1-1.
                          type: string
                        interfaceResource:
                          description: Reference to a Interface.
                          type: string
                        node:
                          description: Reference to a TopoNode.
                          type: string
                      required:
                      - interfaceResource
                      - node
                      type: object
                    speed:
                      type: string
                  required:
                  - local
                  - sim
                  type: object
                minItems: 1
                type: array
            required:
            - links
            type: object
          status:
            description: SimLinkStatus defines the observed state of SimLink
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
